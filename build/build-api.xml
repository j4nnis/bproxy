<project name="zap" default="wave-test" basedir=".">
	<description>Build ZAP.</description>

    <!--
    These settings are for ZAP built from trunk (with build.xml) listening on localhost:8090 and 
    testing the ZAP Web App Vulnerability Examples running on localhost:8080 
    -->
    <property name="targetHost" value="http://localhost:8080/" />
    <property name="targetApp" value="${targetHost}zap-wave/"/>
    <property name="zapaddr" value="localhost" />
    <property name="zapport" value="8090" />
    <property name="zapdir" location="zap" />
    <property name="zaphome" location="${zapdir}/home" />

    <path id="build.classpath">
        <fileset dir="${zapdir}" includes="zap.jar"/>
    </path>

	<taskdef name="accessUrlTask" classname="org.zaproxy.clientapi.ant.AccessUrlTask" classpathref="build.classpath" />
	<taskdef name="activeScanUrlTask" classname="org.zaproxy.clientapi.ant.ActiveScanUrlTask" classpathref="build.classpath" />
    <taskdef name="activeScanSiteTask" classname="org.zaproxy.clientapi.ant.ActiveScanSubtreeTask" classpathref="build.classpath" />
	<taskdef name="alertCheckTask" classname="org.zaproxy.clientapi.ant.AlertCheckTask" classpathref="build.classpath" />
	<taskdef name="loadSessionTask" classname="org.zaproxy.clientapi.ant.LoadSessionTask" classpathref="build.classpath" />
	<taskdef name="newSessionTask" classname="org.zaproxy.clientapi.ant.NewSessionTask" classpathref="build.classpath" />
	<taskdef name="saveSessionTask" classname="org.zaproxy.clientapi.ant.SaveSessionTask" classpathref="build.classpath" />
	<taskdef name="spiderUrlTask" classname="org.zaproxy.clientapi.ant.SpiderUrlTask" classpathref="build.classpath" />
	<taskdef name="stopZapTask" classname="org.zaproxy.clientapi.ant.StopZapTask" classpathref="build.classpath" />
	<taskdef name="alert" classname="org.zaproxy.clientapi.ant.AlertTask" classpathref="build.classpath" />

	<target name="startZap">
		<java classname="org.zaproxy.zap.ZAP" fork="true" spawn="true" dir="${zapdir}">
			<arg value="-port"/>
			<arg value="${zapport}"/>
			<arg value="-dir"/>
			<arg value="${zaphome}"/>
			<classpath>
				<pathelement location="${zapdir}/zap.jar"/>
			</classpath>
		</java>
		<!-- Give ZAP a chance to start -->
		<sleep seconds="20"/>
	</target>

	<target name="startZapDaemon">
		<java classname="org.zaproxy.zap.ZAP" fork="true" spawn="true" dir="${zapdir}">
			<arg value="-daemon"/>
			<arg value="-port"/>
			<arg value="${zapport}"/>
			<arg value="-dir"/>
			<arg value="${zaphome}"/>
			<classpath>
				<pathelement location="${zapdir}/zap.jar"/>
			</classpath>
		</java>
		<!-- Give ZAP a chance to start -->
		<sleep seconds="20"/>
	</target>

	<target name="stopZap">
	    <stopZapTask zapAddress="${zapaddr}" zapPort="${zapport}" debug="true"/>
	</target>

	<target name="spider">
	    <spiderUrlTask zapAddress="${zapaddr}" zapPort="${zapport}" url="${targetHost}"/>
	</target>

	<target name="activescanSite">
	    <activeScanSiteTask zapAddress="${zapaddr}" zapPort="${zapport}" url="${targetHost}"/>
	</target>

    <target name="activescanUrl">
        <activeScanUrlTask zapAddress="${zapaddr}" zapPort="${zapport}" url="${targetHost}"/>
    </target>
	
	<target name="wave-test">
		
		<!-- Start ZAP -->
		<antcall target="startZapDaemon" />
		
		<!-- Access the top URL -->
	    <accessUrlTask zapAddress="${zapaddr}" zapPort="${zapport}" url="${targetApp}" debug="true"/>

		<!-- Spider the whole site -->
	    <spiderUrlTask zapAddress="${zapaddr}" zapPort="${zapport}" url="${targetHost}" debug="true"/>
		<sleep seconds="10"/>
		<!-- And spider the app (in case it's not accessible directly) -->
	    <spiderUrlTask zapAddress="${zapaddr}" zapPort="${zapport}" url="${targetApp}" debug="true"/>
		<sleep seconds="10"/>
		
		<!-- Active scan the whole site -->
	    <activeScanSiteTask zapAddress="${zapaddr}" zapPort="${zapport}" url="${targetHost}" debug="true"/>
		<sleep seconds="75"/>

		<!-- Save to a timestamped session file -->
		<tstamp>
			<format property="timestamp" pattern="MM-dd-yyyy HH-mm-ss"/>
		</tstamp>
	    <saveSessionTask zapAddress="${zapaddr}" zapPort="${zapport}" name="${zaphome}/session/test ${timestamp}" debug="true"/>

		<!-- Give the passive scanner thread a chance to catch up -->
		<sleep seconds="20"/>
		
		<!-- Check the alerts logged -->
	    <alertCheckTask zapAddress="${zapaddr}" zapPort="${zapport}" debug="true">
	    	<!--
	    		The alertCheckTask will fail if any alerts are reported..
	    		ignoreAlert alerts are ignored if reported
	    		requireAlerts will fail if not present
	    		Missing elements match everything, so:
			    	<ignoreAlert risk="Low" reliability="Warning"/>
			    will ignore all alerts with a Low risk and Warning reliability
			    The url, param and other fields are all regexs 
	    	 -->
	    	<ignoreAlert alert="Cookie set without HttpOnly flag" risk="Low" reliability="Warning"/>
	    	<ignoreAlert alert="URL Redirector Abuse" risk="High" reliability="Warning" 
	    		url="${targetApp}active/redirect/redirect-url-basic.jsp?redir=http://www.owasp.org"/> 
	    	<!-- Ignore all of the following for now -->
	    	<ignoreAlert alert="X-Content-Type-Options header missing" />
	    	<ignoreAlert alert="X-Frame-Options header not set" />
	    	<ignoreAlert alert="HTTP Parameter Override" />
	    	<ignoreAlert alert="Absence of Anti-CSRF Tokens" />
	    	<ignoreAlert alert="Anti CSRF tokens scanner" />

	    	<requireAlert alert="Application Error disclosure" risk="Medium" reliability="Warning" 
	    	    url="${targetApp}passive/info/info-server-stack-trace.jsp"/>
	    	<requireAlert alert="Weak Authentication Method" risk="Medium" reliability="Warning" 
	    	    url="${targetApp}passive/session/weak-authentication-basic.jsp"/>
	    	<requireAlert alert="Cookie set without HttpOnly flag" risk="Low" reliability="Warning" 
	    		url="${targetApp}passive/info/info-app-stack-trace.jsp"/>
	    	<requireAlert alert="Password Autocomplete in browser" risk="Low" reliability="Warning" 
	    			url="${targetApp}passive/session/session-password-autocomplete.jsp"/>
	    	<requireAlert alert="Cross Site Scripting (Reflected)" risk="High" reliability="Warning"
	    		url="${targetApp}active/xss/xss-url-basic.jsp.*"/> 
	    	<requireAlert alert="Cross Site Scripting (Reflected)" risk="High" reliability="Warning" 
	    		url="${targetApp}active/xss/xss-form-basic.jsp"/> 
	    	<!-- XXX Following XSS no longer reported...
	    	<requireAlert alert="Cross site scripting" risk="High" reliability="Warning" 
	    		url="${targetApp}active/xss/xss-form-strip-script.jsp"/> -->
	    	<requireAlert alert="SQL Injection - Hypersonic SQL" risk="High" reliability="Warning" 
	    		url="${targetApp}active/inject/inject-sql-url-basic.jsp.*"/>
	    	<requireAlert alert="SQL Injection - Hypersonic SQL" risk="High" reliability="Warning" 
	    		url="${targetApp}active/inject/inject-sql-form-basic.jsp"/>
	    	<!-- The examples might not be available...
	    	<requireAlert alert="Session ID in URL rewrite" risk="Low" reliability="Warning" 
	    		url="${targetHost}servlets-examples/servlet/SessionExample.*"/> -->
	    	<!-- XXX Following XSS no longer reported...
	    	<requireAlert alert="Cross site scripting" risk="High" reliability="Warning" 
	    		url="${targetApp}active/xss/xss-form-anti-csrf.jsp"/> -->

	    </alertCheckTask>
		
		<!--
		Note that if the above test fails ZAP will not be stopped, so you will need to call the stopZap target directly.
		-->

		<!-- Stop ZAP -->
	    <stopZapTask zapAddress="${zapaddr}" zapPort="${zapport}"/>
	</target>
	
</project>