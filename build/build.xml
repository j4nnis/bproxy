<project name="zap" default="full-release" basedir=".">
	<description>Build ZAP.</description>
	<!-- set global properties for this build -->
	<property name="src" location="../src" />
	<property name="src.version" value="1.7" />
	<property name="build" location="build" />
	<property name="build.lib.dir" location="lib" />
	<property name="dist" location="zap" />
	<property name="dist.lib.dir" location="../lib" />
	<property name="javadocs.dir" location="../javadocs" />
	<property name="lang.dir" value="${src}/lang" />
	<property name="help.dir" value="../../zap-core-help/src/help" />
	<property name="test.lib" location="../testlib" />
	<property name="test.src" location="../test" />
	<property name="test.build" location="buildtest" />
	<property name="zap.extensions.alpha.dir" location="../../zap-extensions_alpha/" />
	<property name="zap.extensions.beta.dir" location="../../zap-extensions_beta/" />
	<property name="zap.extensions.trunk.dir" location="../../zap-extensions/" />
	<property name="zap.test.trunk.dir" location="../../zaproxy-test/" />
	<property name="package" value="zaproxy" />

	<!-- mac specific properties -->
	<property name="dist-mac" location="zap-mac" />
	<property name="mac-skeleton" location="mac_os_x" />
	<property name="app.name" value="OWASP ZAP.app" />
	<property name="app.volname" value="OWASP ZAP" />
	<property name="app.bundle" value="${dist-mac}/${app.name}" />
	<property name="app.executable" value="${app.bundle}/Contents/MacOS/OWASP ZAP.sh" />
	<property name="app.java" value="${app.bundle}/Contents/Java" />
	<!--This version downloaded from http://www.oracle.com/technetwork/java/javase/downloads/jre8-downloads-2133155.html -->
	<property name="app.jrearchive" value="jre-8u92-macosx-x64.tar.gz" />
	<property name="app.jredir" value="jre1.8.0_92.jre" />
	<property name="app.plugins" value="${app.bundle}/Contents/PlugIns" />

	<!-- Detect Operating system (Though only the Mac check is used, the other OS checks might be useful for future purposes -->
	<condition property="isMac">
		<os family="mac" />
	</condition>
	<condition property="isUnix">
		<os family="unix" />
	</condition>
	<condition property="isWindows">
		<os family="windows" />
	</condition>

	<path id="build.classpath">
		<fileset dir="${build.lib.dir}" includes="*.jar"/>
	</path>

	<!-- Ant task to generate JavaHelp jars -->
	<taskdef name="generatejavahelpjars" classname="org.zaproxy.ant.javahelp.taskdefs.GenerateJavaHelpJars" classpathref="build.classpath" />

	<!-- task to do conditionals -->
	<taskdef classpathref="build.classpath" resource="net/sf/antcontrib/antlib.xml" />

	<!-- task to build debs -->
	<taskdef classpathref="build.classpath" name="deb" classname="org.vafer.jdeb.ant.DebAntTask"/>

	<path id="dist.classpath">
		<!--pathelement location="."/-->
		<fileset dir="${dist.lib.dir}" includes="**/*.jar" />
	</path>

	<target name="init">
		<!-- Create the time stamp -->
		<tstamp />

		<!-- Create the build directory structure used by compile -->

		<delete dir="${dist}" includeEmptyDirs="true" />
		<delete dir="${build}" includeEmptyDirs="true" />
		<delete dir="${test.build}" includeEmptyDirs="true" />

		<mkdir dir="${build}" />
		<mkdir dir="${test.build}" />
		<mkdir dir="results" />
	</target>

	<target name="clean" depends="setup" description="Cleans up previous distributions">
		<delete verbose="true">
			<fileset dir="." includes="zaproxy*.deb" />
			<fileset dir="." includes="ZAP*.dmg" />
			<fileset dir="." includes="ZAP*.tar.gz" />
			<fileset dir="." includes="ZAP*.zip" />
		</delete>
		<delete dir="${app.name}" />      <!-- if you've unzipped the Mac version, for testing -->
		<delete dir="ZAP_${version}" />   <!-- if you've untarred the Linux version, for testing -->
		<delete dir="${test.build}" includeEmptyDirs="true" />
		<delete dir="results"  includeEmptyDirs="true" />
	</target>

	<target name="compile" depends="init" description="Compile the source ">
		<echo message="Compiling the source..." />

		<!-- Compile with debug information if the property "javac.debug" is set to true -->
		<local name="debug" />
		<condition property="debug" value="true" else="false">
			<istrue value="${javac.debug}" />
		</condition>

		<!-- Compile the java code from ${src} into ${build} -->
		<!--javac srcdir="${src}" destdir="${build}" classpath="zap.jar"/-->
		<javac srcdir="${src}" destdir="${build}" source="${src.version}" target="${src.version}" includeantruntime="false" debug="${debug}" encoding="UTF-8">
			<compilerarg value="-Xlint:all"/>
			<compilerarg value="-Xlint:-options"/> <!-- Otherwise fails with Java 8 -->
			<compilerarg value="-Werror"/>
			<classpath>
				<fileset dir="${dist.lib.dir}">
					<include name="**/*.jar" />
				</fileset>
			</classpath>
		</javac>

		<!-- Compile the java test code from ${test.src} into ${test.build} -->
		<javac srcdir="${test.src}" destdir="${test.build}" source="${src.version}" target="${src.version}" includeantruntime="false" debug="${debug}" encoding="UTF-8">
			<compilerarg value="-Xlint:all"/>
			<compilerarg value="-Xlint:-options"/> <!-- Otherwise fails with Java 8 -->
			<compilerarg value="-Werror"/>
			<classpath>
				<pathelement location="${build}" />
				<fileset dir="${dist.lib.dir}">
					<include name="**/*.jar" />
				</fileset>
				<fileset dir="${test.lib}">
					<include name="**/*.jar" />
				</fileset>
			</classpath>
		</javac>

	</target>

	<target name="dist" depends="compile" description="Generates the distribution">
		<echo message="Creating the distribution set..." />

		<!-- Create the distribution directory -->
		<mkdir dir="${dist}" />
		<!--copy file="lib.jar" tofile="${dist}/lib.jar"/-->

		<copy file="${src}/xml/log4j.properties" tofile="${build}/xml/log4j.properties" />

		<copy todir="${build}/resource">
			<fileset dir="${src}/resource" excludes="**/.svn/** **/_svn/**" />
		</copy>

		<copy todir="${dist}/xml">
			<fileset dir="${src}/xml" excludes="**/.svn/** **/_svn/**" />
		</copy>
		<copy todir="${dist}/db">
			<fileset dir="${src}/db" excludes="**/.svn/** **/_svn/**" />
		</copy>
		<copy todir="${dist}/plugin">
			<fileset dir="${src}/plugin" excludes="**/.svn/** **/_svn/**" />
		</copy>
		<copy todir="${dist}/scripts">
			<fileset dir="${src}/scripts" excludes="**/.svn/** **/_svn/**" />
		</copy>
		<copy todir="${dist}/lang">
			<fileset dir="${src}/lang" excludes="**/.svn/** **/_svn/**" />
		</copy>

		<copy todir="${dist}/license">
			<fileset dir="${src}/license">
				<exclude name="**/.svn/**" />
				<exclude name="**/_svn/**" />
				<exclude name="OrangeExtensions.License.txt" />
			</fileset>
		</copy>
		<copy todir="${dist}/lib">
			<fileset dir="${dist.lib.dir}">
				<include name="**/*.jar" />
				<exclude name="orange-extensions-1.3.0.jar" />
				<exclude name="**/.svn/**" />
				<exclude name="**/_svn/**" />
			</fileset>
		</copy>
		<!-- Include properties files from the source code to support extension specific language files -->
		<copy todir="${build}/org">
			<fileset dir="${src}/org" includes="**/*.properties" />
		</copy>
		<!-- Copy standard README - this is overwritted for weekly releases -->
		<copy file="${src}/doc/README" tofile="${dist}/README" />

		<!-- Copy any scripts, and give execute perms -->
		<copy todir="${dist}">
			<fileset dir="${src}" includes="*.sh" excludes="**/.svn/** **/_svn/**" />
			<fileset dir="${src}" includes="*.bat" excludes="**/.svn/** **/_svn/**" />
		</copy>

		<chmod perm="ug+x">
			<!-- This only has any effect on Linux -->
			<fileset dir="${dist}">
				<include name="*.sh" />
				<exclude name="**/.svn/**" />
				<exclude name="**/_svn/**" />
			</fileset>
		</chmod>

		<!--copy file="${src}/doc/release.txt" todir="${dist}"/-->

		<copy file="${src}/resource/zap.ico" todir="${dist}"/>

		<!-- Copy source to build directory to be included in jar, only if "dist.with.source" is set -->
		<antcall target="copy-source-to-build" />

		<manifestclasspath property="dist.manifest.classpath" jarfile="${dist}/${zap.jar}">
			<!--classpath refid="dist.classpath" /-->
			<classpath>
				<fileset dir="${dist}/lib">
					<include name="**/*.jar" />
				</fileset>
				<path location="${dist}/lang/" />
			</classpath>
		</manifestclasspath>

		<tstamp>
			<format property="yyyymmdd" pattern="yyyy-MM-dd"/>
		</tstamp>

		<jar jarfile="${dist}/${zap.jar}" update="true" compress="false">
			<zipfileset dir="${build}" prefix="">
				<!-- Exclude all extensions that are build as addons - these are build next -->
			</zipfileset>
			<manifest>
				<attribute name="Main-Class" value="org.zaproxy.zap.ZAP" />
				<attribute name="Class-Path" value="${dist.manifest.classpath}" />
				<attribute name="Implementation-Version" value="${version}" />
				<attribute name="Create-Date" value="${yyyymmdd}" />
			</manifest>
		</jar>

		<!-- Correct the ZAP jar name -->
		<replace file="${dist}/zap.bat" token="zap-dev.jar" value="${zap.jar}"/>
		<replace file="${dist}/zap.sh" token="zap-dev.jar" value="${zap.jar}"/>

	</target>

	<target name="dist-with-source" description="Builds ZAP jar with source to be used in zap-extensions">
		<property name="dist.with.source" value="true" />
		<antcall target="dist" />
	</target>

	<target name="copy-source-to-build" if="dist.with.source">
		<copy todir="${build}">
			<fileset dir="${src}" includes="**/*.java" />
		</copy>
	</target>

	<macrodef name="copy-help-to-addon" description="deploy the help file to the equivalent addon">
		<attribute name="src"/>
		<attribute name="ext"/>
		<attribute name="lang"/>
		<sequential>
			<copy file="@{src}/zaphelp@{lang}.jar" 
	        	todir="@{ext}/src/org/zaproxy/zap/extension/help@{lang}/lib"/>
		</sequential>
	</macrodef>

	<target name="generate-help-jars" description="Generates all ZAP (core) help jars (default and i18n) and copies them to the right place (lib directory)">
		<!-- Note that the translated languages currently supported are explicitly named - 
    		most dont have enough content for an alpha release -->
		<local name="wkdir" />
		<property name="wkdir" location="${build}/HelpJars" />
		<delete dir="${wkdir}" includeEmptyDirs="true" />
		<mkdir dir="${wkdir}" />
		<mkdir dir="${wkdir}/jars" />
		<generatejavahelpjars jhalljar="${build.lib.dir}/jhall.jar" destdir="${wkdir}/jars" 
            workingdir="${wkdir}" helpcontentsdirname="contents" helpsetfilename="helpset*.hs">
			<dirset dir="${help.dir}">
				<include name="zaphelp" />
				<include name="zaphelp_bs_BA" />
				<include name="zaphelp_es_ES" />
				<include name="zaphelp_fr_FR" />
				<include name="zaphelp_ja_JP" />
				<include name="zaphelp_pt_BR" />
			</dirset>
		</generatejavahelpjars>
		<!-- copy the jars to the right add-ons -->
		<copy-help-to-addon src="${wkdir}/jars" ext="${zap.extensions.trunk.dir}" lang=""/>
		<!-- default en_GB -->
		<copy-help-to-addon src="${wkdir}/jars" ext="${zap.extensions.alpha.dir}" lang="_bs_BA"/>
		<copy-help-to-addon src="${wkdir}/jars" ext="${zap.extensions.alpha.dir}" lang="_es_ES"/>
		<copy-help-to-addon src="${wkdir}/jars" ext="${zap.extensions.alpha.dir}" lang="_fr_FR"/>
		<copy-help-to-addon src="${wkdir}/jars" ext="${zap.extensions.alpha.dir}" lang="_ja_JP"/>
		<copy-help-to-addon src="${wkdir}/jars" ext="${zap.extensions.trunk.dir}" lang="_pt_BR"/>

		<delete dir="${wkdir}" includeEmptyDirs="true" />
	</target>

	<target name="generate-language-file" depends="setup" 
			description="Generates the language file (note the X should be changed;)">
		<property name="langfile" value="ZAP_${version}_language_pack.X.zaplang" />
		<!-- delete the previous one (if present) -->
		<delete file="${langfile}" />
		<!-- Zip up the language files -->
		<zip destfile="${langfile}"
             basedir="${src}"
             includes="lang/**"
             excludes="**/.svn/**"
                />
		<copy file="${langfile}" 
        	todir="${zap.extensions.trunk.dir}/src/org/zaproxy/zap/extension/coreLang/files/lang"/>
	</target>

	<target name="generate-javadocs" description="Generates the javadocs">
		<!-- Delete all the previous generated files and directories from the
          "javadocs.dir" directory before generating the new ones in case of any
          class or package has been renamed, deleted or moved. -->
		<delete includeEmptyDirs="true">
			<fileset dir="${javadocs.dir}" includes="**/*" />
		</delete>

		<echo message="Generating JavaDoc..." />
		<javadoc packagenames="org.*"
                 sourcepath="${src}"
                 encoding="UTF-8"
                 destdir="${javadocs.dir}"
                 windowTitle="OWASP Zed Attack Proxy"
                 classpathref="dist.classpath"
                 link="http://docs.oracle.com/javase/7/docs/api/">
		</javadoc>

	</target>

	<target name="generate-apis" description="Generates the client APIs">
		<path id="classpath">
			<pathelement location="../bin" />
			<pathelement location="./zap/${zap.jar}" />
			<pathelement location="./zap" />
			<fileset dir="../lib" includes="**/*.jar" />
		</path>
		<java classname="org.zaproxy.zap.extension.api.JavaAPIGenerator" dir=".." fork="yes">
			<classpath refid="classpath" />
		</java>
		<java classname="org.zaproxy.zap.extension.api.PythonAPIGenerator" dir=".." fork="yes">
			<classpath refid="classpath" />
		</java>
		<java classname="org.zaproxy.zap.extension.api.NodeJSAPIGenerator" dir=".." fork="yes">
			<classpath refid="classpath" />
		</java>
		<java classname="org.zaproxy.zap.extension.api.PhpAPIGenerator" dir=".." fork="yes">
			<classpath refid="classpath" />
		</java>
		<java classname="org.zaproxy.zap.extension.api.GoAPIGenerator" dir=".." fork="yes">
			<classpath refid="classpath" />
		</java>
	</target>

    <target name="copy-jar-to-extension-projects" depends="setup, dist">
        <copy file="${dist}/${zap.jar}" tofile="${zap.extensions.trunk.dir}/lib/${zap.jar}"/>
        <copy file="${dist}/${zap.jar}" tofile="${zap.extensions.beta.dir}/lib/${zap.jar}"/>
        <copy file="${dist}/${zap.jar}" tofile="${zap.extensions.alpha.dir}/lib/${zap.jar}"/>
    </target>

	<target name="test" depends="setup, dist">
        <!-- Run the JUnit tests NOTE THAT THIS IS WORK IN PROGRESS ;) -->
        <junit printsummary="yes" haltonerror="true" failureproperty="TestsFailed">
            <classpath>
                <pathelement location="${build}"/>
                <pathelement location="${test.build}"/>
        		<fileset dir="${dist.lib.dir}">
        			<include name="*.jar" />
        			<exclude name="ant*.jar" />
        		</fileset>
        		<fileset dir="../testlib">
        			<include name="*.jar" />
        		</fileset>
            </classpath>
            <formatter type="plain"/>
            <formatter type="xml"/>
            <batchtest fork="yes" todir="results">
                <fileset dir="${test.build}">
                    <include name="**/*UnitTest.class"/>
                    <exclude name="**/Abstract*Test.class"/>
                </fileset>
                <fileset dir="${test.build}">
                    <include name="**/AbstractPluginUnitTest.class"/>
                    <include name="**/AbstractParamUnitTest.class"/>
                    <include name="**/AbstractMultipleOptionsBaseTableModelUnitTest.class"/>
                </fileset>
            </batchtest>
		</junit>
		<fail if="TestsFailed" message="Test(s) failed!" />
        <!-- Run the quick unit tests -->
		<!-- TODO
		<antcall target="unit-test-start-stop"/>
		--> 
		<!-- The 2.2 tests will fail as the add-ons are not backwards compatible
		<antcall target="unit-test-2.2-start-stop"/>
		--> 
	</target>

	
	<target name="deploy-release-addons">
		<delete includeEmptyDirs="false">
			<fileset dir="${src}/plugin" includes="*.zap" />
		</delete>
		<ant antfile="${zap.extensions.trunk.dir}/build/build.xml" target="deploy-release" inheritAll="false"/>
		<ant antfile="${zap.extensions.beta.dir}/build/build.xml"  target="deploy-release" inheritAll="false"/>
		<!-- Alpha add-ons should typically _not_ be included in a full release -->
		<!--ant antfile="${zap.extensions.alpha.dir}/build/build.xml" target="deploy-release" inheritAll="false"/-->
	</target>

	<target name="deploy-weekly-addons">
		<delete includeEmptyDirs="false">
			<fileset dir="${src}/plugin" includes="*.zap" />
		</delete>
		<ant antfile="${zap.extensions.trunk.dir}/build/build.xml" target="deploy-weekly" inheritAll="false"/>
		<ant antfile="${zap.extensions.beta.dir}/build/build.xml"  target="deploy-weekly" inheritAll="false"/>
		<ant antfile="${zap.extensions.alpha.dir}/build/build.xml" target="deploy-weekly" inheritAll="false"/>
	</target>

	<target name="deploy-all-addons">
		<delete includeEmptyDirs="false">
			<fileset dir="${src}/plugin" includes="*.zap" />
		</delete>
		<ant antfile="${zap.extensions.trunk.dir}/build/build.xml" target="deploy-all" inheritAll="false"/>
		<ant antfile="${zap.extensions.beta.dir}/build/build.xml"  target="deploy-all" inheritAll="false"/>
		<ant antfile="${zap.extensions.alpha.dir}/build/build.xml" target="deploy-all" inheritAll="false"/>
	</target>

	<!-- Package the cross-platform 'lite' release -->
	<target name="package-lite">
		<echo message="Packaging the Lite build..." />

		<!-- delete previously build packages -->
		<delete file="ZAP_${version}_Core.tar.gz" />

		<!-- Tar up the release -->
		<tar destfile="ZAP_${version}_Core.tar.gz" compression="gzip">
			<tarfileset dir="${dist}" prefix="ZAP_${version}" preserveLeadingSlashes="false">
				<include name="**" />
				<exclude name="**/.svn/**" />
				<exclude name="**/_svn/**" />
				<exclude name="zap.sh" />
				<!-- This filters out all but the specified add-ons -->
				<exclude name="plugin/**" />
			</tarfileset>
			<tarfileset dir="${dist}" prefix="ZAP_${version}" preserveLeadingSlashes="false">
				<!-- The list of 'lite' add-ons -->
				<include name="plugin/ascanrules-*.zap" />
				<include name="plugin/bruteforce-*.zap" />
				<include name="plugin/coreLang-*.zap" />
				<include name="plugin/diff-*.zap" />
				<include name="plugin/gettingStarted-*.zap" />
				<include name="plugin/help-*.zap" />
				<include name="plugin/invoke-*.zap" />
				<include name="plugin/onlineMenu-*.zap" />
				<include name="plugin/plugnhack-*.zap" />
				<include name="plugin/pscanrules-*.zap" />
				<include name="plugin/quickstart-*.zap" />
				<include name="plugin/reveal-*.zap" />
				<include name="plugin/saverawmessage-*.zap" />
				<include name="plugin/tips-*.zap" />
			</tarfileset>
			<tarfileset dir="${dist}" prefix="ZAP_${version}" filemode="755" preserveLeadingSlashes="false">
				<include name="zap.sh" />
			</tarfileset>
		</tar>
	</target>

	<!-- Package the Linux build -->
	<target name="package-linux">
		<echo message="Packaging the Linux build... for Version ${version}" />

		<property name="zap.archive" location="ZAP_${version}_Linux.tar.gz" />

		<!-- delete previously build packages -->
		<delete file="${zap.archive}" />

		<!-- Tar up the release -->
		<tar destfile="${zap.archive}" compression="gzip">
			<tarfileset dir="${dist}" prefix="ZAP_${version}" preserveLeadingSlashes="false">
				<include name="**" />
				<exclude name="**/.svn/**" />
				<exclude name="**/_svn/**" />
				<exclude name="zap.sh" />
			</tarfileset>
			<tarfileset dir="${dist}" prefix="ZAP_${version}" filemode="755" preserveLeadingSlashes="false">
				<include name="zap.sh" />
			</tarfileset>
		</tar>

		<!-- build the Debian archive -->
		<!--
        Note: 
        1) we do not include the following files in the Deb, since these likely need to be generated by the maintainers of the 
            Linux distro
     		- /usr/share/doc/zaproxy/changelog.Debian.gz
			- /usr/share/doc/zaproxy/copyright
		2) We do NOT bundle the plugins as part of the deb either.  These should be deployed separately, for ease of deploy and maintenance.  
			/usr/share/zaproxy/plugin
		3) The zap-api-v*.jar currently needs to be manually uploaded or built separately
		4) "Dev Build" is not a valid version from a Debian packaging point of view.  If we detect it, use a datestamp version instead 
		-->

		<echo message="Packaging the Debian package... for Version ${version}" />
		<if>
			<equals arg1="${version}" arg2="Dev Build" />
			<then>
				<echo message="'${version}' is not a valid Debian version. Using a datestamp instead." />
				<tstamp>
					<format property="yyyymmdd" pattern="yyyy-MM-dd"/>
				</tstamp>
				<!-- DEB version number must start with a digit -->
				<property name="deb.package.version" value="${yyyymmdd}" />
			</then>
			<else>
				<property name="deb.package.version" value="${version}" />
			</else>
		</if>

		<!-- delete previously generated deb and generated control file (in the tmp directory), if any -->
		<delete file="${package}-${deb.package.version}.deb" />
		<delete dir="tmp" />

		<copy todir="tmp/debian/control">
			<fileset dir="debian/control"/>
			<filterset begintoken="[[" endtoken="]]">
				<filter token="version" value="${deb.package.version}"/>
			</filterset>
		</copy>
		<deb destfile="${package}-${deb.package.version}.deb" control="tmp/debian/control">
			<data src="${zap.archive}" type="archive">
				<!-- do not deploy a BAT file to a Linux distro :) -->
				<exclude name="**/zap.bat"/>
				<mapper type="perm" strip="1" prefix="/usr/share/${package}"/>
			</data>
			<data src="debian/zap" type="file">
				<mapper type="perm" strip="1" prefix="/usr/bin" filemode="755"/>
			</data>
			<!-- soft link /usr/bin/owasp-zap to /usr/bin/zap (requires jdeb 1.4 or so..) -->
			<link name="/usr/bin/owasp-zap" target="/usr/bin/zap"/>
		</deb>
		<!-- tidy up, tidy up -->
		<delete dir="tmp" />
		<delete file="${package}-${deb.package.version}.changes" verbose="true" failonerror="true"/>

	</target>

	<!-- Package the Mac OS X release -->
	<target name="package-macosx">
		<echo message="Packaging the Mac OS X build..." />

		<!-- We can't store the JRE in SVN currently, so error out if it isn't manually put there -->
		<fail message="Note that ${app.jrearchive} must be in ${mac-skeleton}/${app.name}/Contents/PlugIns for build to complete.">
			<condition>
				<not>
					<resourcecount count="1" >
						<fileset id="fs" dir="${mac-skeleton}/${app.name}/Contents/PlugIns" includes="${app.jrearchive}" />
					</resourcecount>
				</not>
			</condition>
		</fail>

		<!-- New Mac housekeeping procedure, so that you don't delete your entire /Applications directory -->
		<delete dir="${dist-mac}" includeEmptyDirs="true" followsymlinks="false" removeNotFollowedSymlinks="true" />
		<mkdir dir="${dist-mac}" />

		<copy todir="${dist-mac}">
			<fileset dir="${mac-skeleton}" excludes="**/.svn/** **/_svn/**" />
		</copy>

		<copy todir="${app.java}">
			<fileset dir="${dist}">
				<include name="**" />
				<exclude name="**/.svn/**" />
				<exclude name="**/_svn/**" />
				<exclude name="**/*.bat" />
				<exclude name="**/*.ico" />
			</fileset>
		</copy>

		<chmod perm="755" file="${app.executable}" />
		<chmod perm="755" file="${app.java}/zap.sh" />


		<!-- SVN destroys the JRE directory, therefore we have to use this ugly fix in order to include a proper JRE -->
		<exec dir="${app.plugins}" executable="tar" spawn="false" failonerror="true">
			<arg line=" -xzf ${app.jrearchive}" />
		</exec>

		<delete file="${app.plugins}/${app.jrearchive}" />

		<replace dir="${app.bundle}" summary="true" encoding="UTF-8">
			<include name="**/Info.plist" />
			<replacefilter token="_JREDIR_" value="${app.jredir}" />
			<replacefilter token="_SHORT_VERSION_STRING_" value="${version}" />
			<replacefilter token="_VERSION_STRING_" value="2" />
			<replacefilter token="_ZAPJAR_" value="${zap.jar}" />
		</replace>

		<if>
			<istrue value="${isMac}" />
			<then>
				<delete file="ZAP_${version}.dmg" />
				<echo message="Creating compressed disk image for the Mac OS X release" />
				<symlink link="${dist-mac}/Applications" resource="/Applications" />
				<exec dir="${dist-mac}" executable="hdiutil" spawn="false" failonerror="true">
					<arg value="create" />
					<arg value="-format" />
					<arg value="UDBZ" />
					<arg value="-megabytes" />
					<arg value="300" />
					<arg value="-srcfolder" />
					<arg file="${dist-mac}" />
					<arg value="-volname" />
					<arg value="${app.volname}" />
					<arg file="ZAP_${version}.dmg" />
				</exec>
				<exec executable="rm" spawn="false" failonerror="false">   <!-- ANT seems to NPE if done the proper way, with delete or symlink -->
					<arg value="${dist-mac}/Applications" />
				</exec>
			</then>
			<else>
				<!-- No point if not on Mac? Uncomment to generate if required
				<delete file="ZAP_${version}_Mac_OS_X.zip" />
				<echo message="Creating ZIP archive for the Mac OS X release; build on a Mac for compressed .dmg" />
				<exec dir="${dist-mac}" executable="zip" spawn="false" failonerror="true">
					<arg line="-y -q -r '../ZAP_${version}_Mac_OS_X.zip' '${app.name}'" />
				</exec>
				-->
			</else>
		</if>

		<!-- New Mac housekeeping procedure, so that you don't delete your entire /Applications directory -->
		<delete dir="${dist-mac}" includeEmptyDirs="true" followsymlinks="false" removeNotFollowedSymlinks="true" />
	</target>

	<!-- Package a date-stamped build -->
	<target name="package-daily">
		<echo message="Packaging a date stamped release..." />

		<!-- delete any of packages for today -->
		<property name="zipname" value="ZAP_WEEKLY_${version}.zip" />
		<delete file="${zipname}" />

		<!-- Tar up the release -->
		<zip destfile="${zipname}">
			<zipfileset dir="${dist}" prefix="ZAP_${version}">
				<include name="**" />
				<exclude name="**/.svn/**" />
				<exclude name="**/_svn/**" />
				<exclude name="zap.sh" />
			</zipfileset>
			<zipfileset dir="${dist}" prefix="ZAP_${version}" filemode="755">
				<include name="zap.sh" />
			</zipfileset>
		</zip>
	</target>

	<!-- Load the version from version.txt, set ${zap.jar} -->
	<target name="setup">
		<loadfile property="version" srcfile="version.txt" />
		<if>
			<equals arg1="${version}" arg2="Dev Build" />
			<then>
				<property name="zap.jar" value="zap-dev.jar" />
			</then>
			<else>
				<property name="zap.jar" value="zap-${version}.jar" />
			</else>
		</if>

		<echo message="Build version is: ${version}" />
		<echo message="Jar file for build is: ${zap.jar}" />
	</target>

	<target name="lite-release" depends="setup, dist, package-lite"
		description="Generates the distribution and (lite) cross-platform packages" />

	<target name="full-release" depends="setup, dist, package-linux, package-macosx"
		description="Generates the distribution and Linux/MacOS X packages [default]" />

	<target name="day-stamped-release" description="Generates the day-stamped package, as well as the distribution and help jars">
		<tstamp>
			<format property="yyyymmdd" pattern="yyyy-MM-dd"/>
		</tstamp>
		<property name="version" value="D-${yyyymmdd}" />
		<echo message="Version is ${version}" />
		<property name="zap.jar" value="zap-${version}.jar" />

		<antcall target="generate-help-jars" />
		<!-- Set to compile with debug information -->
		<property name="javac.debug" value="true" />
		<antcall target="dist" />
		<!-- Overwrite the standard README with the weekly one -->
		<delete file="${dist}/README" />
		<copy file="${src}/doc/README.weekly" tofile="${dist}/README"/>
		<antcall target="package-daily" />
	</target>

</project>
